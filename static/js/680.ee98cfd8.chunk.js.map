{"version":3,"file":"static/js/680.ee98cfd8.chunk.js","mappings":"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","sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Form/Form.styled.jsx","components/services/formSchema.js","redux/contacts/selectors.js","components/Form/Form.jsx","components/ContactsList/ContactList.styled.jsx","components/ListItem/ListItem.styled.jsx","components/ListItem/Listitem.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","components/ContactsList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/ContactList.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SectionItem = styled.section`\n  width: 600px;\n  padding: 20px;\n  margin: 20px auto 20px auto;\n  border: solid #205295 2px;\n  border-radius: 3px;\n`;\nexport const Title = styled.h1`\n  font-size: 30px;\n  color: #205295;\n`;\n","import { SectionItem, Title } from './Section.styled';\n//import PropTypes from 'prop-types';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionItem>\n      {title && <Title>{title}</Title>}\n      {children}\n    </SectionItem>\n  );\n};\n","import styled from 'styled-components';\nimport { Field, Form, ErrorMessage } from 'formik';\n\nexport const PhonebookForm = styled(Form)`\n  margin-top: 10px;\n  margin-bottom: 30px;\n`;\nexport const InputLabel = styled.label`\n  display: block;\n  margin-bottom: 20px;\n  color: rgb(61, 30, 30);\n  font-weight: 200;\n  font-size: 20px;\n`;\nexport const TextInput = styled(Field)`\n  display: block;\n  padding: 10px;\n  width: 96%;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  font-size: 15px;\n`;\n\nexport const StyledErrorMessage = styled(ErrorMessage)`\n  color: #2c74b3;\n  padding: 5px;\n  font-size: 13px;\n`;\n\nexport const FormButton = styled.button`\n  padding: 10px 20px;\n  background-color:  #205295;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  opacity: 0.8;\n  transition: opacity 250ms cubic-bezier(0.165, 0.84, 0.44, 1);\n  cursor: pointer;\n  color: #fff;\n  font-weight: 500;\n  font-size: 16px;\n  text-transform: uppercase;\n  :hover {\n    opacity: 1;\n`;\n","import * as Yup from 'yup';\n\nexport const formSchema = Yup.object({\n  name: Yup.string()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, {\n      message:\n        'Invalid name. Name may contain only letters, apostrophe, dash and spaces.',\n    })\n    .required('Name is a required field'),\n\n  number: Yup.string()\n    .matches(/^\\+?(\\d{1,2})?[-.\\s]?\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4}$/, {\n      message:\n        'Invalid number. Phone number must be digits and can contain spaces, dashes, parentheses and can start with +. For example: (123) 456-7890, 123-456-7890, 123.456.7890, 1234567890, +91 (123) 456-7890',\n    })\n    .required('Number is a required field'),\n});\n","import { createSelector } from '@reduxjs/toolkit';\nimport { useSelector } from 'react-redux';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectStatusFilter = state => state.filter;\n\nexport const selectVisibleTasks = createSelector(\n  [selectContacts, selectStatusFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter?.toLowerCase();\n    return contacts?.filter(({ name }) =>\n      name.toLowerCase()?.includes(normalizedFilter)\n    );\n  }\n);\n\nexport const useContacts = () => {\n  return useSelector(selectVisibleTasks);\n};\n","// import { useState } from 'react';\nimport {\n  PhonebookForm,\n  InputLabel,\n  TextInput,\n  FormButton,\n  StyledErrorMessage,\n} from './Form.styled';\nimport { Formik } from 'formik';\nimport { formSchema } from 'components/services/formSchema';\nimport { useDispatch } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { useContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n  const contacts = useContacts();\n\n  console.log(typeof contacts);\n  console.log(contacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const normalizedName = values.name.toLowerCase();\n    const nameExists = contacts.find(\n      ({ name }) => name.toLowerCase() === normalizedName\n    );\n    const numberExists = contacts.find(\n      ({ number }) => number === values.number\n    );\n    if (nameExists || numberExists) {\n      return Notify.info(`${values.name} is already in contacts!`);\n    }\n    console.log(values);\n    dispatch(addContact(values));\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={formSchema}\n      onSubmit={handleSubmit}\n    >\n      <PhonebookForm>\n        <InputLabel>\n          <TextInput placeholder=\"Full Name\" type=\"text\" name=\"name\" />\n          <StyledErrorMessage name=\"name\" component=\"div\" />\n        </InputLabel>\n        <InputLabel>\n          <TextInput placeholder=\"Phone Number\" type=\"tel\" name=\"number\" />\n          <StyledErrorMessage name=\"number\" component=\"div\" />\n        </InputLabel>\n        <FormButton type=\"submit\">Add Contact</FormButton>\n      </PhonebookForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const PhonebookList = styled.ul`\n  margin-top: 30px;\n  margin-left: 5px;\n`;\n","import styled from 'styled-components';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  font-size: 20px;\n  margin-bottom: 20px;\n  color: #205295;\n`;\nexport const Button = styled.button`\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n  transition: transform 250ms cubic-bezier(0.075, 0.82, 0.165, 1);\n  :hover {\n    transform: scale(1.3);\n`;\n","import { ContactItem, Button } from './ListItem.styled';\nimport { FaRegTimesCircle } from 'react-icons/fa';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  return (\n    <ContactItem key={id}>\n      {name} : {number}\n      <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        <FaRegTimesCircle size=\"20px\" />\n      </Button>\n    </ContactItem>\n  );\n};\n\nListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const StyledNotification = styled.p`\n  font-size: 15px;\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { StyledNotification } from './Notification.styled';\n\nexport const Notification = ({ message }) => {\n  return <StyledNotification>{message}</StyledNotification>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { PhonebookList } from './ContactList.styled';\nimport { ListItem } from 'components/ListItem/Listitem';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Notification } from 'components/Notification/Notification';\nimport {\n  selectError,\n  selectIsLoading,\n  useContacts,\n} from 'redux/contacts/selectors';\nimport { fetchContacts } from '../../redux/contacts/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const visibleContacts = useContacts();\n\n  //console.log(visibleContacts);\n\n  return (\n    <PhonebookList>\n      {visibleContacts.length === 0 && (\n        <Notification message=\"There are no contacts in your phone book. Please add a contact!\" />\n      )}\n      {isLoading && !error && <Notification message=\"Request in progress...\" />}\n      {visibleContacts.map(({ id, name, number }) => (\n        <ListItem key={id} id={id} name={name} number={number} />\n      ))}\n    </PhonebookList>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array,\n};\n","import styled from 'styled-components';\n\nexport const SearchForm = styled.form`\n  margin-top: 10px;\n  margin-bottom: 30px;\n`;\nexport const InputLabel = styled.label`\n  display: block;\n  margin-bottom: 20px;\n  color: rgb(61, 30, 30);\n  font-weight: 200;\n  font-size: 20px;\n`;\nexport const TextInput = styled.input`\n  display: block;\n  padding: 10px;\n  width: 96%;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  font-size: 15px;\n`;\n","import { SearchForm, InputLabel, TextInput } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { setFilterValue } from 'redux/contacts/filterSlice';\nimport { selectStatusFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectStatusFilter);\n  const handleFilter = e => dispatch(setFilterValue(e.target.value));\n  console.log(filter);\n  return (\n    <SearchForm>\n      <InputLabel htmlFor={nanoid()}>\n        <TextInput\n          id={nanoid()}\n          onChange={handleFilter}\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"find contacts by name\"\n          autoComplete=\"off\"\n          required\n        />\n      </InputLabel>\n    </SearchForm>\n  );\n};\n\n// Filter.propTypes = {\n//   onChange: PropTypes.func.isRequired,\n//   value: PropTypes.string,\n// };\n","import { Section } from '../components/Section/Section';\nimport { Form } from '../components/Form/Form';\nimport { ContactList } from '../components/ContactsList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n\nconst Contacts = () => {\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Your Contacts</title>\n      </Helmet>\n      <Section title=\"Phonebook\">\n        <Form />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        <ContactList />\n      </Section>\n    </HelmetProvider>\n  );\n};\n\nexport default Contacts;\n"],"names":["SectionItem","styled","Title","Section","title","children","PhonebookForm","Form","InputLabel","TextInput","Field","StyledErrorMessage","ErrorMessage","FormButton","formSchema","Yup","name","matches","message","required","number","selectIsLoading","state","contacts","isLoading","selectError","error","selectStatusFilter","filter","selectVisibleTasks","createSelector","items","normalizedFilter","toLowerCase","includes","useContacts","useSelector","dispatch","useDispatch","console","log","initialValues","validationSchema","onSubmit","values","resetForm","normalizedName","nameExists","find","numberExists","Notify","addContact","placeholder","type","component","PhonebookList","ContactItem","Button","ListItem","id","onClick","deleteContact","size","StyledNotification","Notification","ContactList","useEffect","fetchContacts","visibleContacts","length","map","SearchForm","Filter","htmlFor","nanoid","onChange","e","setFilterValue","target","value","autoComplete"],"sourceRoot":""}